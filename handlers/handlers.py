import io

from aiogram.filters.command import Command
from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram import Bot
from aiogram.types.input_file import BufferedInputFile
from aiogram.types import InputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder

from keyboards import keyboards as kb
from functions import functions as func
from middlewares.register_check import RegisterCheck
from state.storage import Lesson, EditLesson
from sqlalchemy.ext.asyncio import async_sessionmaker

import os
from dotenv import load_dotenv

load_dotenv()
router = Router()
router.message.middleware(RegisterCheck())


@router.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç üëã\n\n–í—ã–±–µ—Ä–∏ –æ–ø—Ü–∏–∏ –Ω–∏–∂–µ:",
                         reply_markup=kb.main_menu)


@router.message(Command("mod"))
async def cmd_admin(message: types.Message, session_maker: async_sessionmaker):
    user_id = message.from_user.id
    data = await func.get_userdata(user_id, session_maker=session_maker)
    if data['role'] == 'moderator':
        await message.answer("–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –º–µ–Ω—é –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞",
                             reply_markup=kb.mod_menu)
    else:
        await message.answer("–í—ã –Ω–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä",
                             reply_markup=kb.main_menu)


@router.message(Lesson.title)
async def set_lesson_name(message: types.Message, state: FSMContext):
    await state.update_data(title=message.text)
    await state.set_state(Lesson.description)

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–∞")


@router.message(Lesson.description)
async def set_lesson_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await state.set_state(Lesson.content)

    print(message)

    await message.answer("–î–æ–±–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª –∏–ª–∏ zoom-—Å—Å—ã–ª–∫—É")


@router.message(Lesson.content)
async def set_lesson_content(message: types.Message, state: FSMContext):
    await state.update_data(content=message.text)
    await state.set_state(Lesson.task)

    await message.answer("–î–æ–±–∞–≤—å—Ç–µ —Ñ–∞–π–ª (–¥–æ–∫ –∏–ª–∏ —Ç–∞–±–ª–∏—Ü–∞")


@router.message(Lesson.task)
async def set_lesson_content(message: types.Message, state: FSMContext, bot: Bot, session_maker: async_sessionmaker):
    # –¢–µ—Å—Ç–∏—Ä—É—é –±–∏–Ω–∞—Ä–Ω–æ–µ "—Å–∫–∞—á–∏–≤–∞–Ω–∏–µ" —Ñ–∞–π–ª–æ–≤, –¥–∞–±—ã –Ω–µ –∑–∞–Ω–∏–º–∞—Ç—å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω–µ
    # –ü–ª–∞–Ω–∏—Ä—É—é –ø–æ–¥–≥—Ä—É–∂–∞—Ç—å –∏–∑ –±–¥ –±–∞–π—Ç—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∏—Ö —Å—Ç—É–¥–µ–Ω—Ç–∞–º

    file_data = await func.get_file_data(message=message, bot=bot)

    await state.update_data(task=file_data['task'], filename=file_data['task'])
    data = await state.get_data()

    is_lesson_created = await func.create_lesson(data, session_maker=session_maker)

    if is_lesson_created is True:
        input_file = BufferedInputFile(file_data['task'], filename=file_data['filename'])
        await message.answer_document(input_file,
                                      caption=f'–£—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:'
                                              f'\n\n–ù–∞–∑–≤–∞–Ω–∏–µ: "{data["title"]}"'
                                              f'\n–û–ø–∏—Å–∞–Ω–∏–µ: {data["description"]}'
                                              f'\n–ö–æ–Ω—Ç–µ–Ω—Ç: {data["content"]}'
                                              f'\n\n–ó–∞–¥–∞–Ω–∏–µ: ',
                                      reply_marku=kb.mod_menu)
    else:
        await message.answer(f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –û—à–∏–±–∫–∞: {is_lesson_created[1]}")


@router.message(EditLesson.title)
async def edit_lesson_title(message: types.Message, state: FSMContext, session_maker: async_sessionmaker):
    await state.update_data(title=message.text)
    data = await state.get_data()

    is_lesson_changed = await func.edit_lesson_data(option=data['option'],
                                                    lesson_id=data['lesson_id'],
                                                    data=data['title'],
                                                    filename=None,
                                                    session_maker=session_maker)

    if is_lesson_changed is True:
        await message.answer(f'–í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞ –Ω–∞ "{data["title"]}"')
    else:
        await message.answer(f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –û—à–∏–±–∫–∞: {is_lesson_changed[1]}")


@router.message(EditLesson.description)
async def edit_lesson_description(message: types.Message, state: FSMContext, session_maker: async_sessionmaker):
    await state.update_data(description=message.text)
    data = await state.get_data()

    is_lesson_changed = await func.edit_lesson_data(option=data['option'],
                                                    lesson_id=data['lesson_id'],
                                                    data=data['description'],
                                                    filename=None,
                                                    session_maker=session_maker)

    if is_lesson_changed is True:
        await message.answer(f'–í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–∞ –Ω–∞ "{data["description"]}"')
    else:
        await message.answer(f'–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –û—à–∏–±–∫–∞: {is_lesson_changed[1]}')


@router.message(EditLesson.content)
async def edit_lesson_content(message: types.Message, state: FSMContext, session_maker: async_sessionmaker):
    if message.video:
        video_id = message.video.file_id

        await state.update_data(video_id=video_id)
        data = await state.get_data()

        is_lesson_changed = await func.edit_lesson_data(option=data['option'],
                                                        lesson_id=data['lesson_id'],
                                                        data=data['video_id'],
                                                        filename=None,
                                                        session_maker=session_maker)

        if is_lesson_changed is True:
            await message.answer_video(video=video_id, caption="–í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –≤–∏–¥–µ–æ –≤—ã—à–µ",
                                       reply_markup=kb.mod_menu)
        else:
            await message.answer(f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É. –û—à–∏–±–∫–∞: {is_lesson_changed[1]}")
    else:

        link = message.text

        await state.update_data(link=link)
        data = await state.get_data()

        is_lesson_changed = await func.edit_lesson_data(option=data['option'],
                                                        lesson_id=data['lesson_id'],
                                                        data=data['link'],
                                                        filename=None,
                                                        session_maker=session_maker)

        if is_lesson_changed is True:
            await message.answer(f'–í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞: "{link}"',
                                 reply_markup=kb.mod_menu)
        else:
            await message.answer(f'–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É. –û—à–∏–±–∫–∞ {is_lesson_changed[1]}')


@router.message(EditLesson.task)
async def edit_lesson_content(message: types.Message, state: FSMContext, bot: Bot, session_maker: async_sessionmaker):
    file_data = await func.get_file_data(message=message, bot=bot)

    await state.update_data(task=file_data['task'], task_filename=file_data['task_filename'])
    data = await state.get_data()

    is_lesson_changed = await func.edit_lesson_data(option=data['option'],
                                                    lesson_id=data['lesson_id'],
                                                    data=data['task'],
                                                    filename=data['task_filename'],
                                                    session_maker=session_maker)

    if is_lesson_changed is True:
        file = BufferedInputFile(file_data['task'], filename=file_data['task_filename'])

        await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ:")
        await message.answer_document(file)

    else:
        await message.answer(f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –û—à–∏–±–∫–∞: {is_lesson_changed[1]}")
